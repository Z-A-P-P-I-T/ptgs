#Projektbas:
#Skapad för att generera trafik till en switch.
#Kimi Autto 25-02-27
#Packetester

PacketTester/
├── gui/
│   ├── __init__.py
│   └── huvud_gui.py      # GUI-fronten
├── packet_generator/
│   ├── __init__.py
│   └── generator.py      # Genererar PCAP med Scapy
├── replay/
│   ├── __init__.py
│   └── återspelning.py   # Hanterar tcpreplay
└── main.py               # Startpunkt för appen



#Modul för att generera PCAP-filer, 
#Kimi Autto 25-02-27
#packet_generator/generator.py

from scapy.all import Ether, IP, TCP, UDP, ICMP, RandIP, RandMAC, RandShort, wrpcap
import random

def generera_pcap(antal_paket, utfil):
    # Lista för att lagra paketen
    paketlista = []
    
    # Skapa paket
    for i in range(antal_paket):
        kalla_ip = RandIP()._fix()  # Slumpmässig käll-IP
        mal_ip = RandIP()._fix()    # Slumpmässig mål-IP
        kalla_mac = RandMAC()._fix()  # Slumpmässig käll-MAC
        mal_mac = RandMAC()._fix()    # Slumpmässig mål-MAC

        # Välj protokoll slumpmässigt: TCP (50%), UDP (30%), ICMP (20%)
        protokoll = random.choices(["tcp", "udp", "icmp"], weights=[50, 30, 20], k=1)[0]
        eth = Ether(src=kalla_mac, dst=mal_mac)

        if protokoll == "tcp":
            paket = eth / IP(src=kalla_ip, dst=mal_ip) / TCP(sport=RandShort(), dport=RandShort(), flags="S")
        elif protokoll == "udp":
            paket = eth / IP(src=kalla_ip, dst=mal_ip) / UDP(sport=RandShort(), dport=RandShort())
        else:  # icmp
            paket = eth / IP(src=kalla_ip, dst=mal_ip) / ICMP()

        paketlista.append(paket)

    # Spara paketen till en PCAP-fil
    wrpcap(utfil, paketlista)
    return f"Skapade {antal_paket} paket till {utfil}"


# Modul för återspelning med TCPreplay
# Kimi Autto 25-02-27

# replay/aterspelning.py

import subprocess


def aterspela_pcap(granssnitt, pcap_fil, hastighet="normal", loopar=1):
    # Bygg baskommandot med sudo för tcpreplay
    kommando = ["sudo", "tcpreplay", "-i", granssnitt, pcap_fil]

    # Lägg till hastighetsalternativ baserat på användarens val
    if hastighet == "max":
        kommando.append("-t")
    elif hastighet == "mbps":
        kommando.extend(["--mbps", "1000"])
    # För "normal" gör vi inget, eftersom tcpreplay kör på ursprunglig hastighet som standard

    # Lägg till loopar om fler än 1 anges
    if loopar > 1:
        kommando.extend(["--loop", str(loopar)])

    # Logga kommandot för felsökning
    print(f"Kör kommando: {' '.join(kommando)}")

    try:
        # Kör tcpreplay-kommandot och fånga utdata
        resultat = subprocess.run(kommando, capture_output=True, text=True, check=True)
        return f"Återspelning klar: {resultat.stdout}"
    except subprocess.CalledProcessError as e:
        return f"Återspelning misslyckades: {e.stderr}"
    except FileNotFoundError:
        return "Fel: tcpreplay är inte installerat eller hittas inte i PATH."
    except Exception as e:
        return f"Oväntat fel: {str(e)}"

# GUI-modulen med tkinter.
# Kimi Autto 25-02-27
# gui/huvud_gui.py

import tkinter as tk
from tkinter import ttk, messagebox
from packet_generator.generator import generera_pcap
from replay.aterspelning import aterspela_pcap
import threading

class PaketTestarGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Pakettestare för Cisco 9606")
        self.root.geometry("400x500")

        # Sektion för paketgenerering
        tk.Label(root, text="Generera PCAP").pack(pady=5)
        tk.Label(root, text="Antal paket:").pack()
        self.antal_paket = tk.Entry(root)
        self.antal_paket.insert(0, "100000")
        self.antal_paket.pack()

        tk.Label(root, text="Utdatafil:").pack()
        self.utfil = tk.Entry(root)
        self.utfil.insert(0, "test_trafik.pcap")
        self.utfil.pack()

        tk.Button(root, text="Generera", command=self.starta_generering).pack(pady=5)

        # Sektion för återspelning
        tk.Label(root, text="Återspela PCAP").pack(pady=5)
        tk.Label(root, text="Gränssnitt:").pack()
        self.granssnitt = tk.Entry(root)
        self.granssnitt.insert(0, "eth0")
        self.granssnitt.pack()

        tk.Label(root, text="PCAP-fil:").pack()
        self.aterspelningsfil = tk.Entry(root)
        self.aterspelningsfil.insert(0, "test_trafik.pcap")
        self.aterspelningsfil.pack()

        tk.Label(root, text="Hastighet:").pack()
        self.hastighet = ttk.Combobox(root, values=["normal", "max", "mbps"])
        self.hastighet.set("normal")
        self.hastighet.pack()

        tk.Label(root, text="Loopar:").pack()
        self.loopar = tk.Entry(root)
        self.loopar.insert(0, "1")
        self.loopar.pack()

        tk.Button(root, text="Återspela", command=self.starta_aterspelning).pack(pady=5)

        # Statusfält
        self.status = tk.Label(root, text="Klar", wraplength=350)
        self.status.pack(pady=10)

    def starta_generering(self):
        def kor():
            try:
                antal = int(self.antal_paket.get())
                fil = self.utfil.get()
                self.status.config(text="Genererar...")
                resultat = generera_pcap(antal, fil)
                self.status.config(text=resultat)
            except Exception as e:
                messagebox.showerror("Fel", str(e))
        
        threading.Thread(target=kör, daemon=True).start()

    def starta_aterspelning(self):
        def kor():
            try:
                iface = self.granssnitt.get()
                fil = self.aterspelningsfil.get()
                hast = self.hastighet.get()
                loop = int(self.loopar.get())
                self.status.config(text="Återspelar...")
                resultat = aterspela_pcap(iface, fil, hast, loop)
                self.status.config(text=resultat)
            except Exception as e:
                messagebox.showerror("Fel", str(e))
        
        threading.Thread(target=kor, daemon=True).start()

def starta_gui():
    root = tk.Tk()
    app = PaketTestarGUI(root)
    root.mainloop()



# Startpunkt för att köra appen.
# Kimi Autto 25-02-27

from gui.huvud_gui import starta_gui

if __name__ == "__main__":
    starta_gui()
